import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

x=np.array([88,47,18,50,31])
y=np.array([55,81,97,40,58])

model= np.polyfit(x, y, 1)
model

predict = np.poly1d(model)
predict(65)

y_pred = predict(x)
y_pred

from sklearn.metrics import r2_score 
r2_score(y, y_pred)

y_line = model[1] + model[0]* x
plt.plot(x, y_line, c = 'r')
plt.scatter(x, y_pred)
plt.scatter(x,y,c='r')
plt.show()

import sklearn
from sklearn.datasets import load_boston

boston = load_boston()

data = pd.DataFrame(boston.data)

boston.keys()

data.columns = boston.feature_names
data.head()

data['PRICE'] = boston.target

x = data.drop(['PRICE'], axis = 1)
y = data['PRICE']

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.25,random_state=0)

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
model=lm.fit(xtrain, ytrain)

ytrain_pred = lm.predict(xtrain)
ytest_pred = lm.predict(xtest)

print(model.coef_)
coeff_df=pd.DataFrame(model.coef_,x.columns,columns=['Coefficient'])
coeff_df

from sklearn.metrics import mean_squared_error, r2_score
print("Mean squared error:", mean_squared_error(ytrain, ytrain_pred ))
print("Mean squared error:", mean_squared_error(ytest, ytest_pred))


plt.scatter(ytrain ,ytrain_pred,c='blue',marker='o',label='Training data')
plt.scatter(ytest,ytest_pred ,c='lightgreen',marker='s',label='Test data')
plt.xlabel('True values')
plt.ylabel('Predicted')
plt.title("True value vs Predicted value")
plt.legend(loc= 'upper left')
#plt.hlines(y=0,xmin=0,xmax=50)
plt.plot()
plt.show()

