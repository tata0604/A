import pandas as pd
import numpy as np
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

# Load the Iris dataset
data = pd.read_csv("Iris.csv")

# Separate the features (X) and the target variable (y)
X = data.iloc[:, :-1]
y = data.iloc[:, -1]

# Label encode the target variable
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# Split the data into training and testing sets
xtrain, xtest, ytrain, ytest = train_test_split(X, y_encoded, test_size=0.2, random_state=0)

# Create and train the Gaussian Naive Bayes classifier
gaussian = GaussianNB()
gaussian.fit(xtrain, ytrain)

# Make predictions on the test set
Y_pred = gaussian.predict(xtest)

# Plot scatter plot with colored points
plt.scatter(xtest['SepalLengthCm'], xtest['SepalWidthCm'], c=Y_pred, cmap='tab10')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Scatter plot of Sepal Length vs. Sepal Width')
plt.show()

confusion_matrix = confusion_matrix(ytest, Y_pred)
confusion_matrix

TP=confusion_matrix[0][0]
FP=confusion_matrix[0][1]
FN=confusion_matrix[1][0]
TN=confusion_matrix[1][1]

accuracy=(TP+TN)/(TP+TN+FP+FN)
error_rate=(FP+FN)/(TP+TN+FN+FP)
precision=TP/(TP+FP)
recall=TP/(TP+FN)

print("\nTrue Positive (TP):", TP)
print("False Positive (FP):", FP)
print("True Negative (TN):", TN)
print("False Negative (FN):", FN)
print("\nAccuracy:", accuracy)
print("Error rate:", error_rate)
print("Precision:", precision)
print("Recall:", recall)

from sklearn.metrics import precision_score,confusion_matrix,accuracy_score,recall_score
cm = confusion_matrix(ytest, Y_pred)

accuracy = accuracy_score(ytest,Y_pred)
precision = precision_score(ytest, Y_pred,average='micro')
recall = recall_score(ytest, Y_pred,average='micro')